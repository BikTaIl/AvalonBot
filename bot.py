import random
import math
import asyncio
import bot_data as bd
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import executor

bot = Bot(token=bd.BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class TestStates(Helper):
    mode = HelperMode.snake_case
    WAIT_LOBBY = ListItem()
    WAIT_NAME = ListItem()
    FLUDD = ListItem()
    IN_GAME = ListItem()
    WAIT_SETTINGS = ListItem()
    WAIT__BAN = ListItem()


async def struc(message: int):
    lobby_id = bd.id_to_lobby[message]
    lobby_settings = bd.lobby_to_settings[lobby_id]
    roles = lobby_settings['roles']

    role_str = ', '.join(roles)
    roles_message = f'–†–æ–ª–∏, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –∏–≥—Ä–µ: {role_str}'
    roles_msg = await bot.send_message(message, roles_message)

    if message not in bd.id_to_delete1:
        bd.id_to_delete1[message] = []
    bd.id_to_delete1[message].append(roles_msg)

    lake_lady_enabled = lobby_settings['Lake_lady']
    eskalibur_enabled = lobby_settings['Eskalibur']

    options_message = f'–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏: –õ–µ–¥–∏ –û–∑–µ—Ä–∞ - {"" if lake_lady_enabled else "–Ω–µ"}–≤–∫–ª—é—á–µ–Ω–∞, –≠—Å–∫–∞–ª–∏–±—É—Ä - {"" if eskalibur_enabled else "–Ω–µ"}–≤–∫–ª—é—á–µ–Ω'
    options_msg = await bot.send_message(message, options_message)

    bd.id_to_delete1[message].append(options_msg)


async def delete_mes(message: int):
    if message in bd.id_to_delete:
        while bd.id_to_delete[message]:
            await bd.id_to_delete[message][0].delete()
            bd.id_to_delete[message] = bd.id_to_delete[message][1:]


async def delete1_mes(message: int):
    if message in bd.id_to_delete1:
        while bd.id_to_delete1[message]:
            await bd.id_to_delete1[message][0].delete()
            bd.id_to_delete1[message].pop(0)


async def check_user(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if message.from_user.id in bd.ban or message.from_user.id in bd.id_in_game:
        return True
    return False


async def check_user1(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    return message.from_user.id in bd.ban


async def missions(message: str):
    arr_players = bd.lobby_to_info[message]['round']
    kb1 = InlineKeyboardMarkup()
    kb2 = InlineKeyboardMarkup()
    butt = InlineKeyboardButton('–°–æ–±—Ä–∞—Ç—å –ø–æ—Ö–æ–¥', callback_data='start_mis')
    kb2.add(butt)
    lanc = False
    lobby_info = bd.lobby_to_info[message]
    red_players = lobby_info['red']
    blue_players = lobby_info['blue']
    R_Lancelot = lobby_info['R_Lancelot']
    B_Lancelot = lobby_info['B_Lancelot']
    changes = lobby_info['changes']
    id_to_role = bd.id_to_role
    id_to_name = bd.id_to_name
    missions = bd.missions
    cnt = lobby_info['cnt']

    if R_Lancelot != -1 and red_players + blue_players >= 2 and changes[red_players + blue_players - 2]:
        lanc = True
        id_to_role[B_Lancelot], id_to_role[R_Lancelot] = id_to_role[R_Lancelot], id_to_role[B_Lancelot]
        await bot.send_message(B_Lancelot, '–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Ä–æ–ª—å - üü•–õ–∞–Ω—Å–µ–ª–æ—Ç')
        await bot.send_message(B_Lancelot, '–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Ü–µ–ª—å, –≤—ã—á–∏—Å–ª–∏—Ç—å üü¶–ú–µ—Ä–ª–∏–Ω–∞, –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–∏—Ç—å 3 –ø–æ—Ö–æ–¥–∞')
        await bot.send_message(R_Lancelot, '–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Ä–æ–ª—å - üü¶–õ–∞–Ω—Å–µ–ª–æ—Ç')
        await bot.send_message(R_Lancelot, '–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Ü–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞ 3 –ø–æ—Ö–æ–¥–∞')
        lobby_info['B_Lancelot'], lobby_info['R_Lancelot'] = R_Lancelot, B_Lancelot
    for k in range(len(arr_players)):
        i = arr_players[k]
        butt = InlineKeyboardButton(id_to_name[i], callback_data=('button' + str(k)))
        kb1.add(butt)
        await bot.send_message(int(i), bd.makar_str)
        if lanc:
            await bot.send_message(int(i), '–õ–∞–Ω—Å–µ–ª–æ—Ç—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å —Ä–æ–ª—è–º–∏')
        await bot.send_message(int(i), '–ü–æ—Ö–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç - ' + id_to_name[arr_players[cnt]] + ' –∏–∑ ' + str(
            missions[len(arr_players) - 5][red_players + blue_players]) + ' —á–µ–ª–æ–≤–µ–∫')
        if len(arr_players) >= 7 and missions[len(arr_players) - 5][red_players + blue_players] == 3:
            await bot.send_message(int(i), '–í —ç—Ç–æ–º –ø–æ—Ö–æ–¥–µ –Ω—É–∂–Ω–æ 2 –ø—Ä–æ–≤–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ—Ö–æ–¥ –±—ã–ª –ø—Ä–æ–≤–∞–ª–µ–Ω')
        if lobby_info['skip'] == 4:
            await bot.send_message(int(i), '–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Ö–æ–¥, —Ç–æ –∫—Ä–∞—Å–Ω—ã–µ –≤—ã–∏–≥—Ä–∞—é—Ç')
    lobby_info['mission'] = []
    msg1 = await bot.send_message(arr_players[cnt], text='–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∑—å–º–µ—Ç–µ –≤ –ø–æ—Ö–æ–¥', reply_markup=kb1)
    msg2 = await bot.send_message(arr_players[cnt], text='–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø–æ—Ö–æ–¥', reply_markup=kb2)
    bd.id_to_delete[arr_players[cnt]].append(msg1)
    bd.id_to_delete[arr_players[cnt]].append(msg2)


async def make_mission(message: str):
    bd.lobby_to_info[message]['skip'] = 0
    kb1 = InlineKeyboardMarkup()
    kb2 = InlineKeyboardMarkup()
    blue = InlineKeyboardButton('–£—Å–ø–µ—Ö', callback_data='success')
    red = InlineKeyboardButton('–ü—Ä–æ–≤–∞–ª', callback_data='fail')
    bd.lobby_to_info[message]['success'] = 0
    bd.lobby_to_info[message]['fail'] = 0
    kb1.add(red)
    kb1.add(blue)
    kb2.add(blue)

    for i in bd.lobby_to_info[message]['mission']:
        if bd.id_to_role[i][0] == 'üü¶':
            msg_text = '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Å—Ö–æ–¥ –ø–æ—Ö–æ–¥–∞'
            reply_markup = kb2
        else:
            msg_text = '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Å—Ö–æ–¥ –ø–æ—Ö–æ–¥–∞'
            reply_markup = kb1

        msg = await bot.send_message(i, text=msg_text, reply_markup=reply_markup)
        bd.id_to_delete[i].append(msg)


async def end_game(message: str):
    arr_players = bd.lobby_to_info[message]['round']
    if bd.lobby_to_info[message]['skip'] == 5 or bd.lobby_to_info[message]['red'] == 3:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
            bd.id_in_game.remove(i)
        for i in arr_players:
            state = dp.current_state(user=i)
            await state.set_state(TestStates.all()[0])
            await bot.send_message(i, '–†–æ–ª–∏:')
            for j in arr_players:
                await bot.send_message(i, f"{bd.id_to_name[j]} - {bd.id_to_role[j]}")
    else:
        kb1 = InlineKeyboardMarkup()
        rd = []
        for k, i in enumerate(arr_players):
            if bd.id_to_role[i][0] == 'üü¶':
                butt = InlineKeyboardButton(bd.id_to_name[i], callback_data=f'button1{k}')
                kb1.add(butt)
            else:
                rd.append(bd.id_to_name[i])
        ans = '–ö—Ä–∞—Å–Ω—ã–µ - '
        for i, name in enumerate(rd):
            ans += name
            if i < len(rd) - 1:
                ans += ', '
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–µ–ª—è—é—Ç')
            await bot.send_message(i, ans)
            if bd.id_to_role[i][1] == '–ê':
                msg = await bot.send_message(i, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç–µ', reply_markup=kb1)
                bd.id_to_delete[i].append(msg)
    bd.lobby_in_game.remove(message)


async def lake_lady(message: str):
    kb1 = InlineKeyboardMarkup()
    bd.lobby_to_info[message]['WhoWasLady'].append(bd.lobby_to_info[message]['WhoLady'])
    arr_players = bd.lobby_to_info[message]['round']
    for i in arr_players:
        if i not in bd.lobby_to_info[message]['WhoWasLady']:
            butt = InlineKeyboardButton(i, callback_data='button2' + str(arr_players.index(i)))
            kb1.add(butt)
    msg = await bot.send_message(bd.lobby_to_info[message]['WhoLady'], '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —Ü–≤–µ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å',
                                 reply_markup=kb1)
    bd.id_to_delete[bd.lobby_to_info[message]['WhoLady']].append(msg)


@dp.message_handler(state='*', commands=['ban'])
async def ban(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    user_id = str(message.from_user.id)

    if user_id in (bd.my_id, bd.makar_id):
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —É–≥–æ—Ç–æ–≤–∞–Ω–∞ –∫–∞—Ä–∞')
        await state.set_state(TestStates.all()[5])
    else:
        await message.answer('–•–∞, —Ö–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


@dp.message_handler(state=TestStates.WAIT__BAN)
async def wait_ban(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if message.text in bd.name_to_id:
        if bd.name_to_id[message.text] == message.from_id:
            await message.answer('–ß—Ç–æ –ø–æ—Å–µ–µ—à—å, —Ç–æ –∏ –ø–æ–∂–Ω–µ—à—å')
        else:
            user_id = bd.name_to_id[message.text]
            if user_id in bd.ban:
                await message.answer('–û–∫, —è —Ä–∞–∑–±–∞–Ω–∏–ª –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                await bot.send_message(user_id, '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã')
                bd.ban.remove(user_id)
            else:
                if user_id == bd.my_id:
                    bd.ban.append(message.from_id)
                    await bot.send_message(message.from_id, '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã')
                else:
                    bd.ban.append(user_id)
                    await bot.send_message(user_id, '–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã')
                await message.answer('–û–∫, —è –∑–∞–±–∞–Ω–∏–ª –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    await state.set_state(TestStates.all()[0])


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if await check_user(message):
        return

    bd.id_to_delete.setdefault(message.from_user.id, [])
    bd.id_to_delete1.setdefault(message.from_user.id, [])

    await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—É –ê–≤–∞–ª–æ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
    await state.set_state(TestStates.all()[3])


@dp.message_handler(state=TestStates.WAIT_NAME)
async def give_name(mes1: types.Message):
    if await check_user(mes1):
        return
    state = dp.current_state(user=mes1.from_user.id)

    text = mes1.text.strip()
    words = text.split()
    if len(words) == 1 and text[0] != '/' and len(text) <= 15:
        name = words[0]
        if name not in bd.name_to_id:
            if mes1.from_id in bd.id_to_name:
                bd.name_to_id.pop(bd.id_to_name[mes1.from_id])
                bd.id_to_name.pop(mes1.from_id)
            bd.id_to_name[mes1.from_id] = name
            bd.name_to_id[name] = mes1.from_id
            await mes1.answer('–û–∫, –≤–∞—Å –∑–æ–≤—É—Ç ' + name)
            await state.set_state(TestStates.all()[0])
        else:
            await mes1.answer('–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ')
    else:
        await mes1.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è')


@dp.message_handler(state=TestStates.WAIT_LOBBY)
async def set_lobby(message: types.Message):
    if await check_user(message):
        return

    lobby = message.text
    if lobby in bd.lobbys:
        if lobby in bd.lobby_in_game:
            await message.answer('–í –¥–∞–Ω–Ω–æ–µ –ª–æ–±–±–∏ –Ω–µ–ª—å–∑—è —Å–µ–π—á–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–º –∏–¥–µ—Ç –∏–≥—Ä–∞')
            state = dp.current_state(user=message.from_user.id)
            await state.set_state(TestStates.all()[0])
        else:
            user_id = message.from_user.id
            if user_id in bd.id_to_lobby:
                lobby_id = bd.id_to_lobby[user_id]
                bd.lobby_to_info[lobby_id]['round'] = []
                bd.lobbys[lobby_id].remove(user_id)
                if len(bd.lobbys[lobby_id]) >= 1:
                    await bot.send_message(bd.lobbys[lobby_id][0],
                                           f'–í–∞—à–µ –ª–æ–±–±–∏ –ø–æ–∫–∏–Ω—É–ª {bd.id_to_name[user_id]}, –≤ –≤–∞—à–µ–º –ª–æ–±–±–∏ {len(bd.lobbys[lobby_id])} —á–µ–ª–æ–≤–µ–∫')
            state = dp.current_state(user=user_id)
            await message.answer(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –≤ –ª–æ–±–±–∏ {lobby}")
            if len(bd.lobbys[lobby]) == 0:
                await message.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –¥–∞–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏")
            else:
                await bot.send_message(bd.lobbys[lobby][0],
                                       f'–í –≤–∞—à–µ –ª–æ–±–±–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {bd.id_to_name[user_id]}, –≤ –≤–∞—à–µ–º –ª–æ–±–±–∏ {len(bd.lobbys[lobby]) + 1} —á–µ–ª–æ–≤–µ–∫')
            bd.lobbys[lobby].append(user_id)
            bd.id_to_lobby[user_id] = lobby
            await state.set_state(TestStates.all()[0])
    else:
        await message.answer(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –≤ –ª–æ–±–±–∏ {lobby}")
        await message.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –¥–∞–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏")
        bd.lobbys[lobby] = [message.from_user.id]
        bd.id_to_lobby[message.from_user.id] = lobby
        state = dp.current_state(user=message.from_user.id)
        bd.lobby_to_sem[bd.id_to_lobby[message.from_user.id]] = asyncio.Lock()
        bd.lobby_to_info[bd.id_to_lobby[message.from_user.id]] = {}
        await state.set_state(TestStates.all()[0])
    bd.lobby_to_info[bd.id_to_lobby[message.from_user.id]]['round'] = []


@dp.message_handler(state=TestStates.FLUDD, commands=['join'])
async def join(message: types.Message):
    if await check_user(message):
        return
    state = dp.current_state(user=message.from_user.id)
    await message.answer('Enter the lobby name')  # Description: Changed the message text to be more descriptive
    await state.set_state(TestStates.all()[2])


@dp.message_handler(state=TestStates.FLUDD, commands=['info'])
async def info(message: types.Message):
    if await check_user(message):
        return

    state = dp.current_state(user=message.from_user.id)

    lobby_id = bd.id_to_lobby.get(message.from_user.id)
    if lobby_id:
        lobby_members = bd.lobbys[lobby_id]
        num_members = len(lobby_members)
        members = ' '.join(str(bd.id_to_name[i]) for i in lobby_members)
        admin = bd.id_to_name[lobby_members[0]]

        await message.answer(f'–í –≤–∞—à–µ–º –ª–æ–±–±–∏ {num_members} —á–µ–ª–æ–≤–µ–∫: {members}')
        await message.answer(f'–ê–¥–º–∏–Ω–æ–º —è–≤–ª—è–µ—Ç—Å—è {admin}')
    else:
        await message.answer('–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏')


@dp.message_handler(state=TestStates.FLUDD, commands=['start_game'])
async def start_game(message: types.Message):
    if await check_user(message):
        return
    if message.from_user.id in bd.id_to_lobby:
        if len(bd.lobbys[bd.id_to_lobby[message.from_user.id]]) < 5:
            await message.answer('–í–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É')
        elif len(bd.lobbys[bd.id_to_lobby[message.from_user.id]]) > 10:
            await message.answer('–í–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É')
        else:
            if bd.lobbys[bd.id_to_lobby[message.from_user.id]][0] == message.from_user.id:
                msg0 = await message.answer('–û–∫, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã')
                kb1 = InlineKeyboardMarkup()
                kb2 = InlineKeyboardMarkup()
                kb3 = InlineKeyboardMarkup()
                bt1 = InlineKeyboardButton('üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å', callback_data='pers')
                bt2 = InlineKeyboardButton('üü•–ú–æ—Ä–≥–∞–Ω–∞', callback_data='morg')
                bt3 = InlineKeyboardButton('üü•–û–±–µ—Ä–æ–Ω', callback_data='ober')
                bt4 = InlineKeyboardButton('üü•–ú–æ—Ä–¥—Ä–µ–¥', callback_data='mord')
                bt5 = InlineKeyboardButton('üü¶üü•–õ–∞–Ω—Å–µ–ª–æ—Ç', callback_data='lanc')
                # bt6 = InlineKeyboardButton('–õ–µ–¥–∏ –û–∑–µ—Ä–∞', callback_data='lo')
                # bt7 = InlineKeyboardButton('–≠—Å–∫–∞–ª–∏–±—É—Ä', callback_data='esk')
                bt8 = InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='start')
                bt9 = InlineKeyboardButton('–õ–∞–Ω—Å–µ–ª–æ—Ç—ã –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞', callback_data='los')
                bt10 = InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data='vote')
                kb1.add(bt1)
                kb1.add(bt2)
                kb1.add(bt3)
                kb1.add(bt4)
                kb1.add(bt5)
                # kb2.add(bt6)
                # kb2.add(bt7)
                kb2.add(bt9)
                kb2.add(bt10)
                kb3.add(bt8)
                if not bd.id_to_lobby[message.from_user.id] in bd.lobby_to_settings:
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]] = {}
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'] = []
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['Lake_lady'] = False
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['Eskalibur'] = False
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['Lancelots'] = False
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['CloseVote'] = False
                x = math.floor(len(bd.lobbys[bd.id_to_lobby[message.from_user.id]]) / 2.3) - 1
                bd.lobby_to_info[bd.id_to_lobby[message.from_user.id]]['changes'] = [True, True, False, False, False]
                if len(bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles']) != len(
                        bd.lobbys[bd.id_to_lobby[message.from_id]]):
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'] = []
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'].append('üü¶–ú–µ—Ä–ª–∏–Ω')
                    bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'].append('üü•–ê—Å—Å–∞—Å–∏–Ω')
                    for i in range(x):
                        bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'].append('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
                    x = len(bd.lobbys[bd.id_to_lobby[message.from_user.id]]) - x - 2
                    for i in range(x):
                        bd.lobby_to_settings[bd.id_to_lobby[message.from_user.id]]['roles'].append('üü¶–†—ã—Ü–∞—Ä—å')
                msg1 = await message.answer('–†–æ–ª–∏:', reply_markup=kb1)
                msg2 = await message.answer('–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:', reply_markup=kb2)
                msg3 = await message.answer('–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:', reply_markup=kb3)
                bd.id_to_delete[message.from_user.id].append(msg1)
                bd.id_to_delete[message.from_user.id].append(msg2)
                bd.id_to_delete[message.from_user.id].append(msg3)
                bd.id_to_delete[message.from_user.id].append(msg0)
                state = dp.current_state(user=message.from_user.id)
                await state.set_state(TestStates.all()[4])
                await struc(message.from_user.id)
            else:
                await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –¥–∞–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É')
    else:
        await message.answer('–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏')


@dp.message_handler(state='*', commands=['rules'])
async def start_game(message: types.Message):
    if await check_user1(message):
        return
    await message.answer('–í –∏–≥—Ä–µ –µ—Å—Ç—å —Å–∏–Ω–∏–µ –∏ –∫—Ä–∞—Å–Ω—ã–µ, –∫—Ä–∞—Å–Ω—ã—Ö 1/3 –æ—Ç –∫–æ–ª-–≤–∞ —á–µ–ª–æ–≤–µ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –≤–≤–µ—Ä—Ö. –°—Ä–µ–¥–∏ —Å–∏–Ω–∏—Ö –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π ‚Äì –ú–µ—Ä–ª–∏–Ω. –°—Ä–µ–¥–∏ –∫—Ä–∞—Å–Ω—ã—Ö ‚Äì –ê—Å—Å–∞—Å–∏–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã. –í–Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –∏–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç –≤–∞—à–∞ —Ä–æ–ª—å. –£ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ —Å–≤–æ–π –Ω–∞–±–æ—Ä. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫—Ç–æ –∫–æ–≥–æ –≤–∏–¥–∏—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /rules_night.\n –ó–∞—Ç–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø–æ—Ö–æ–¥—ã. –¶–µ–ª—å —Å–∏–Ω–∏—Ö —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏ —Å–∏–Ω–∏—Ö –ø–æ—Ö–æ–¥–∞, –∫—Ä–∞—Å–Ω—ã—Ö ‚Äì —Ç—Ä–∏ –∫—Ä–∞—Å–Ω—ã—Ö. –ü–æ—Ö–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏–¥–µ—Ä, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–æ –∫—Ä—É–≥—É. –°–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∑–∞–≤–∏—Å—è—â–µ–µ –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫ –∏ –Ω–æ–º–µ—Ä–∞ –ø–æ—Ö–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ /rules_missions.\n    –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ—Ö–æ–¥ –±—ã–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Ö–æ–¥. –ö–∞–∂–¥—ã–π –≥–æ–ª–æ—Å—É–µ—Ç –ó–∞ –∏–ª–∏ –ü—Ä–æ—Ç–∏–≤.\n –î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∞–º –ø–æ—Ö–æ–¥. –í –Ω–µ–º –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç, –£—Å–ø–µ—à–Ω—ã–º –±—É–¥–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ö–æ–¥ –∏–ª–∏ –ü—Ä–æ–≤–∞–ª—å–Ω—ã–º. –£ —Å–∏–Ω–∏—Ö –≤—ã–±–æ—Ä–∞ –Ω–µ—Ç, –æ–Ω–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Ç–æ–ª—å–∫–æ –£—Å–ø–µ—Ö, –∞ –∫—Ä–∞—Å–Ω—ã–µ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ï—Å–ª–∏ –≤ –ø–æ—Ö–æ–¥–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∞—Å–Ω—ã–π (–∏–ª–∏ –¥–≤–∞ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Ö–æ–¥–∞—Ö, –≤ –∫–∞–∫–∏—Ö –∏–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ /rules_missions), —Ç–æ –ø–æ—Ö–æ–¥ –∫—Ä–∞—Å–Ω—ã–π, –∏–Ω–∞—á–µ —Å–∏–Ω–∏–π.\n    –ï—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Ç—Ä–∏ –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞, —Ç–æ –∫—Ä–∞—Å–Ω—ã–µ —Å—Ä–∞–∑—É –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç. –ï—Å–ª–∏ —Ç—Ä–∏ —Å–∏–Ω–∏—Ö –ø–æ—Ö–æ–¥–∞, —Ç–æ —É –∫—Ä–∞—Å–Ω—ã—Ö –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω –≤—ã—Å—Ç—Ä–µ–ª. –ü–æ–ø–∞–≤ –≤ –ú–µ—Ä–ª–∏–Ω–∞, –æ–Ω–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç, –Ω–µ –ø–æ–ø–∞–≤, –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —Å–∏–Ω–∏–µ.')


@dp.message_handler(state='*', commands=['rules_missions'])
async def start_game(message: types.Message):
    if await check_user1(message):
        return
    await message.answer(
        '5 —á–µ–ª–æ–≤–µ–∫ - 2|3|2|3|3\n6 —á–µ–ª–æ–≤–µ–∫ - 2|3|4|3|4\n7 —á–µ–ª–æ–≤–µ–∫ - 2|3|3|4|4\n8 —á–µ–ª–æ–≤–µ–∫ - 3|4|4|5|5\n9 —á–µ–ª–æ–≤–µ–∫ - 3|4|4|5|5\n10 —á–µ–ª–æ–≤–µ–∫ - 3|4|4|5|5\n–ü—Ä–∏ –∏–≥—Ä–µ —Å >=7 —á–µ–ª–æ–≤–µ–∫ –≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–º –ø–æ—Ö–æ–¥–µ –Ω—É–∂–Ω–æ 2 –ø—Ä–æ–≤–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ—Ö–æ–¥ –±—ã–ª –ø—Ä–æ–≤–∞–ª–µ–Ω')


@dp.message_handler(state='*', commands=['rules_night'])
async def start_game(message: types.Message):
    if await check_user1(message):
        return
    await message.answer(
        'üü•–ú–æ—Ä–≥–∞–Ω–∞ - üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞\nüü•–ê—Å—Å–∞—Å–∏–Ω - üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞\nüü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞ - üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç\nüü•–ú–æ—Ä–¥—Ä–µ–¥ - üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞\nüü•–õ–∞–Ω—Å–µ–ª–æ—Ç - –ù–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç\nüü•–û–±–µ—Ä–æ–Ω - –ù–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç\nüü¶–ú–µ—Ä–ª–∏–Ω - üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞\nüü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å - üü¶–ú–µ—Ä–ª–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞\nüü¶–õ–∞–Ω—Å–µ–ª–æ—Ç - –ù–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç\nüü¶–†—ã—Ü–∞—Ä—å - –ù–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç')


@dp.message_handler(state='*', commands=['roles'])
async def start_game(message: types.Message):
    if await check_user1(message):
        return
    await message.answer(
        'üü¶–ú–µ—Ä–ª–∏–Ω. –¢—ã —Å–∏–Ω–∏–π.\n–¢—ã –≤–∏–¥–∏—à—å: üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–û–±–µ—Ä–æ–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –ø–æ–º–æ—á—å –º–∏—Ä–Ω—ã–º —Å–æ–±–∏—Ä–∞—Ç—å —Å–∏–Ω–∏–µ –ø–æ—Ö–æ–¥—ã, –æ–¥–Ω–∞–∫–æ –Ω—É–∂–Ω–æ –Ω–µ —Å–ø–∞–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∫—Ä–∞—Å–Ω—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ –∏—Ö —Ü–µ–ª—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∏ —É–±–∏—Ç—å —Ç–µ–±—è.\n\nüü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å. –¢—ã —Å–∏–Ω–∏–π.\n–¢—ã –≤–∏–¥–∏—à—å: üü¶–ú–µ—Ä–ª–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –ú–µ—Ä–ª–∏–Ω, –∏ –ø–æ–º–æ—á—å –º–∏—Ä–Ω—ã–º —Å–æ–±—Ä–∞—Ç—å —Å–∏–Ω–∏–µ –ø–æ—Ö–æ–¥—ã. \n\nüü•–ê—Å—Å–∞—Å–∏–Ω. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –≤–∏–¥–∏—à—å: üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞.\n\nüü•–ú–æ—Ä–≥–∞–Ω–∞. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –≤–∏–¥–∏—à—å  üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞. \n\nüü•–û–±–µ—Ä–æ–Ω. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞. \n\nüü•–ú–æ—Ä–¥—Ä–µ–¥. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –≤–∏–¥–∏—à—å: üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç, üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞. \n–¢—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç –ú–µ—Ä–ª–∏–Ω.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞.\n\nüü¶–†—ã—Ü–∞—Ä—å. –¢—ã —Å–∏–Ω–∏–π.\n–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å, –∏ —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç.\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Å–µ—Ö –∏ —Å–æ–±–∏—Ä–∞—Ç—å/–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω—É–∂–Ω—ã–µ –ø–æ—Ö–æ–¥—ã.\n\nüü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –≤–∏–¥–∏—à—å: üü•–ê—Å—Å–∞—Å–∏–Ω, üü•–ú–æ—Ä–≥–∞–Ω–∞, üü•–ú–æ—Ä–¥—Ä–µ–¥, üü•–õ–∞–Ω—Å–µ–ª–æ—Ç.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞.\n\nüü•–õ–∞–Ω—Å–µ–ª–æ—Ç. –¢—ã –∫—Ä–∞—Å–Ω—ã–π.\n–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å, –Ω–æ –∫—Ä–∞—Å–Ω—ã–µ –∏ üü¶–ú–µ—Ä–ª–∏–Ω –≤–∏–¥—è—Ç —Ç–µ–±—è.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã—á–∏—Å–ª–∏—Ç—å –ú–µ—Ä–ª–∏–Ω–∞ –∏ —É–±–∏—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞, –ø–µ—Ä–µ–¥ 3, 4 –∏ 5 –ø–æ—Ö–æ–¥–∞–º–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—å—é —Å üü¶–õ–∞–Ω—Å–µ–ª–æ—Ç–æ–º, —Ç–≤–æ—è —Ü–µ–ª—å –∏–≥—Ä—ã —Ç–∞–∫–∂–µ –º–µ–Ω—è–µ—Ç—Å—è.\n\nüü¶–õ–∞–Ω—Å–µ–ª–æ—Ç. –¢—ã —Å–∏–Ω–∏–π.\n–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å, –∏ —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç.\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Å–µ—Ö –∏ —Å–æ–±–∏—Ä–∞—Ç—å/–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω—É–∂–Ω—ã–µ –ø–æ—Ö–æ–¥—ã, –ø–µ—Ä–µ–¥ 3, 4 –∏ 5 –ø–æ—Ö–æ–¥–∞–º–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—å—é —Å üü•–õ–∞–Ω—Å–µ–ª–æ—Ç–æ–º, —Ç–≤–æ—è —Ü–µ–ª—å –∏–≥—Ä—ã —Ç–∞–∫–∂–µ –º–µ–Ω—è–µ—Ç—Å—è.\n')


@dp.callback_query_handler(text='morg', state='*')
async def Morgana_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if not 'üü•–ú–æ—Ä–≥–∞–Ω–∞' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
        if 'üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ú–æ—Ä–≥–∞–Ω–∞')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
            msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å üü•–ú–æ—Ä–≥–∞–Ω–∞ –≤ –∏–≥—Ä—É')
        else:
            msg = await bot.send_message(callback_query.from_user.id,
                                         '–ö—Ä–∞—Å–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å üü•–ú–æ—Ä–≥–∞–Ω—É')
    else:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ú–æ—Ä–≥–∞–Ω–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
        msg = await bot.send_message(callback_query.from_user.id, "–û–∫, —è —É–¥–∞–ª–∏–ª —Ä–æ–ª—å üü•–ú–æ—Ä–≥–∞–Ω–∞ –∏–∑ –∏–≥—Ä—ã")
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='ober', state='*')
async def Oberon_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if not 'üü•–û–±–µ—Ä–æ–Ω' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
        if 'üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–û–±–µ—Ä–æ–Ω')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
            msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å üü•–û–±–µ—Ä–æ–Ω –≤ –∏–≥—Ä—É')
        else:
            msg = await bot.send_message(callback_query.from_user.id,
                                         '–ö—Ä–∞—Å–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å üü•–û–±–µ—Ä–æ–Ω–∞')
    else:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–û–±–µ—Ä–æ–Ω')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
        msg = await bot.send_message(callback_query.from_user.id, "–û–∫, —è —É–¥–∞–ª–∏–ª —Ä–æ–ª—å üü•–û–±–µ—Ä–æ–Ω –∏–∑ –∏–≥—Ä—ã")
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='mord', state='*')
async def Mordred_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if not 'üü•–ú–æ—Ä–¥—Ä–µ–¥' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
        if 'üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ú–æ—Ä–¥—Ä–µ–¥')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
            msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å üü•–ú–æ—Ä–¥—Ä–µ–¥ –≤ –∏–≥—Ä—É')
        else:
            msg = await bot.send_message(callback_query.from_user.id,
                                         '–ö—Ä–∞—Å–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å üü•–ú–æ—Ä–¥—Ä–µ–¥–∞')
    else:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ú–æ—Ä–¥—Ä–µ–¥')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
        msg = await bot.send_message(callback_query.from_user.id, "–û–∫, —è —É–¥–∞–ª–∏–ª —Ä–æ–ª—å üü•–ú–æ—Ä–¥—Ä–µ–¥ –∏–∑ –∏–≥—Ä—ã")
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='pers', state='*')
async def Persival_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if not 'üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü¶–†—ã—Ü–∞—Ä—å')
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å –≤ –∏–≥—Ä—É')
    else:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü¶–†—ã—Ü–∞—Ä—å')
        msg = await bot.send_message(callback_query.from_user.id, "–û–∫, —è —É–¥–∞–ª–∏–ª —Ä–æ–ª—å üü¶–ü–µ—Ä—Å–∏–≤–∞–ª—å –∏–∑ –∏–≥—Ä—ã")
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='lanc', state='*')
async def Lancelot_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if not 'üü•–õ–∞–Ω—Å–µ–ª–æ—Ç' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
        if 'üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞' in bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles']:
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–õ–∞–Ω—Å–µ–ª–æ—Ç')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü¶–õ–∞–Ω—Å–µ–ª–æ—Ç')
            bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü¶–†—ã—Ü–∞—Ä—å')
            msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å üü¶üü•–õ–∞–Ω—Å–µ–ª–æ—Ç –≤ –∏–≥—Ä—É')
        else:
            msg = await bot.send_message(callback_query.from_user.id,
                                         '–ö—Ä–∞—Å–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å üü¶üü•–õ–∞–Ω—Å–µ–ª–æ—Ç–∞')
    else:
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü¶–õ–∞–Ω—Å–µ–ª–æ—Ç')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü•–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ –∑–ª–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].remove('üü•–õ–∞–Ω—Å–µ–ª–æ—Ç')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['roles'].append('üü¶–†—ã—Ü–∞—Ä—å')
        msg = await bot.send_message(callback_query.from_user.id, "–û–∫, —è —É–¥–∞–ª–∏–ª —Ä–æ–ª—å üü¶üü•–õ–∞–Ω—Å–µ–ª–æ—Ç –∏–∑ –∏–≥—Ä—ã")
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='lo', state='*')
async def Lake_Lady_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lake_lady']:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –≤—ã–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –õ–µ–¥–∏ –û–∑–µ—Ä–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lake_lady'] = False
    else:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –≤–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –õ–µ–¥–∏ –û–∑–µ—Ä–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lake_lady'] = True
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='esk', state='*')
async def Esk_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Eskalibur']:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –≤—ã–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –≠—Å–∫–∞–ª–∏–±—É—Ä')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Eskalibur'] = False
    else:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, —è –≤–∫–ª—é—á–∏–ª –º–µ—Ö–∞–Ω–∏–∫—É –≠—Å–∫–∞–ª–∏–±—É—Ä')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Eskalibur'] = True
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='los', state='*')
async def Lanc_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lancelots']:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, –õ–∞–Ω—Å–µ–ª–æ—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lancelots'] = False
    else:
        msg = await bot.send_message(callback_query.from_user.id, '–û–∫, –õ–∞–Ω—Å–µ–ª–æ—Ç—ã –±—É–¥—É—Ç –∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['Lancelots'] = True
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='vote', state='*')
async def Vote_button(callback_query: types.CallbackQuery):
    if await check_user(callback_query):
        return
    await bot.answer_callback_query(callback_query.id)
    await delete1_mes(callback_query.from_user.id)
    msg = types.Message
    if bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['CloseVote']:
        msg = await bot.send_message(callback_query.from_user.id, '–Ø –≤–∫–ª—é—á–∏–ª –æ—Ç–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['CloseVote'] = False
    else:
        msg = await bot.send_message(callback_query.from_user.id, '–Ø –≤–∫–ª—é—á–∏–ª –∑–∞–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
        bd.lobby_to_settings[bd.id_to_lobby[callback_query.from_user.id]]['CloseVote'] = True
    await struc(callback_query.from_user.id)
    bd.id_to_delete1[callback_query.from_user.id].append(msg)


@dp.callback_query_handler(text='start', state='*')
async def real_start_game(message: types.CallbackQuery):
    if await check_user(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    bd.lobby_in_game.append(bd.id_to_lobby[message.from_user.id])
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_roles = bd.lobbys[game_lobby].copy()
    bd.lobby_to_info[game_lobby]['R_Lancelot'] = -1
    bd.lobby_to_info[game_lobby]['B_Lancelot'] = -1
    random.shuffle(arr_roles)
    random.shuffle(bd.lobby_to_info[bd.id_to_lobby[message.from_user.id]]['changes'])
    if len(bd.lobby_to_info[game_lobby]['round']) != len(arr_roles):
        bd.lobby_to_info[game_lobby]['round'] = arr_roles.copy()
        random.shuffle(bd.lobby_to_info[game_lobby]['round'])
        bd.lobby_to_info[game_lobby]['cnt'] = 0
    bd.lobby_to_info[game_lobby]['skip'] = 0
    bd.lobby_to_info[game_lobby]['red'] = 0
    bd.lobby_to_info[game_lobby]['blue'] = 0
    bd.lobby_to_info[game_lobby]['colors'] = ''
    bd.lobby_to_info[game_lobby]['WhoLady'] = bd.lobby_to_info[game_lobby]['round'][
        (bd.lobby_to_info[game_lobby]['cnt'] - 1 + len(arr_roles)) % len(arr_roles)]
    bd.lobby_to_info[game_lobby]['WhoWasLady'] = []
    ans = '–†–æ–ª–∏, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –∏–≥—Ä–µ - \n'
    ans1 = '–ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫—Ä—É–≥—É - '
    for j in range(len(bd.lobby_to_info[game_lobby]['round'])):
        ans1 += bd.id_to_name[bd.lobby_to_info[game_lobby]['round'][j]]
        if j < len(bd.lobby_to_info[game_lobby]['round']):
            ans1 += ', '
    for j in range(len(bd.lobby_to_settings[game_lobby]['roles'])):
        ans += bd.lobby_to_settings[game_lobby]['roles'][j]
        if j < len(bd.lobby_to_settings[game_lobby]['roles']) - 1:
            ans += ', '
            ans += '\n'
    for i in range(len(arr_roles)):
        await bot.send_message(arr_roles[i], '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!')
        await bot.send_message(arr_roles[i], ans)
        await bot.send_message(arr_roles[i], ans1)
        await bot.send_message(arr_roles[i], '–¢–≤–æ—è —Ä–æ–ª—å - ' + bd.lobby_to_settings[game_lobby]['roles'][i])
        await bot.send_message(arr_roles[i], bd.role_to_info[bd.lobby_to_settings[game_lobby]['roles'][i]])
        bd.id_to_role[arr_roles[i]] = bd.lobby_to_settings[game_lobby]['roles'][i]
        bd.id_in_game.append(arr_roles[i])
        bd.id_to_info[arr_roles[i]] = []
        if bd.id_to_role[arr_roles[i]][1] == '–õ' and bd.id_to_role[arr_roles[i]][0] == 'üü•':
            bd.lobby_to_info[game_lobby]['R_Lancelot'] = arr_roles[i]
        if bd.id_to_role[arr_roles[i]][1] == '–õ' and bd.id_to_role[arr_roles[i]][0] == 'üü¶':
            bd.lobby_to_info[game_lobby]['B_Lancelot'] = arr_roles[i]
    for i in range(len(arr_roles)):
        for j in range(len(arr_roles)):
            if i != j:
                edge = bd.id_to_role[arr_roles[i]] + bd.id_to_role[arr_roles[j]]
                if edge in bd.first_night:
                    bd.id_to_info[arr_roles[i]].append(arr_roles[j])
    for i in range(len(arr_roles)):
        random.shuffle(bd.id_to_info[arr_roles[i]])
        ans = '–¢—ã –≤–∏–¥–µ–ª - '
        for j in range(len(bd.id_to_info[arr_roles[i]])):
            ans += bd.id_to_name[bd.id_to_info[arr_roles[i]][j]]
            if j < len(bd.id_to_info[arr_roles[i]]) - 1:
                ans += ', '
        if len(bd.id_to_info[arr_roles[i]]) > 0:
            await bot.send_message(arr_roles[i], ans)
        else:
            await bot.send_message(arr_roles[i], '–¢—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–µ–ª')
        if bd.id_to_role[arr_roles[i]][0] == 'üü•' and bd.id_to_role[arr_roles[i]][1] != '–û' and \
                bd.lobby_to_info[game_lobby]['R_Lancelot'] != -1:
            await bot.send_message(arr_roles[i],
                                   'üü•–õ–∞–Ω—Å–µ–ª–æ—Ç - ' + bd.id_to_name[bd.lobby_to_info[game_lobby]['R_Lancelot']])
    if bd.lobby_to_info[game_lobby]['R_Lancelot'] != -1 and bd.lobby_to_settings[game_lobby]['Lancelots']:
        await bot.send_message(bd.lobby_to_info[game_lobby]['B_Lancelot'],
                               'üü•–õ–∞–Ω—Å–µ–ª–æ—Ç - ' + bd.id_to_name[bd.lobby_to_info[game_lobby]['R_Lancelot']])
        await bot.send_message(bd.lobby_to_info[game_lobby]['R_Lancelot'],
                               'üü¶–õ–∞–Ω—Å–µ–ª–æ—Ç - ' + bd.id_to_name[bd.lobby_to_info[game_lobby]['B_Lancelot']])
    await missions(game_lobby)


@dp.callback_query_handler(text='button0', state='*')
async def button0(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][0] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][0])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][0])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button1', state='*')
async def button1(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][1] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][1])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][1])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button2', state='*')
async def button2(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][2] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][2])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][2])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button3', state='*')
async def button3(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][3] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][3])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][3])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button4', state='*')
async def button4(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][4] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][4])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][4])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button5', state='*')
async def button5(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][5] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][5])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][5])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button6', state='*')
async def button6(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][6] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][6])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][6])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button7', state='*')
async def button7(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][7] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][7])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][7])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button8', state='*')
async def button8(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][8] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][8])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][8])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='button9', state='*')
async def button9(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if bd.lobby_to_info[game_lobby]['round'][9] in bd.lobby_to_info[game_lobby]['mission']:
        await message.answer('–û–∫, —è —É–¥–∞–ª–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].remove(bd.lobby_to_info[game_lobby]['round'][9])
    else:
        await message.answer('–û–∫, —è –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Ö–æ–¥–∞')
        bd.lobby_to_info[game_lobby]['mission'].append(bd.lobby_to_info[game_lobby]['round'][9])
    ans = '–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ - '
    for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
        ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
        if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
            ans += ', '
    if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
        msg = await bot.send_message(message.from_user.id, '–°–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞ –ø—É—Å—Ç')
        bd.id_to_delete[message.from_user.id].append(msg)
    else:
        msg = await bot.send_message(message.from_user.id, ans)
        bd.id_to_delete[message.from_user.id].append(msg)


@dp.callback_query_handler(text='start_mis', state='*')
async def start_mis(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if (len(bd.lobby_to_info[game_lobby]['mission']) == bd.missions[len(arr_players) - 5][
        bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue']]):
        await delete_mes(message.from_user.id)
        await delete1_mes(message.from_user.id)
        ans = '–ò–≥—Ä–æ–∫–∏, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –ø–æ—Ö–æ–¥–µ - '
        for i in range(len(bd.lobby_to_info[game_lobby]['mission'])):
            ans += str(bd.id_to_name[bd.lobby_to_info[game_lobby]['mission'][i]])
            if i < len(bd.lobby_to_info[game_lobby]['mission']) - 1:
                ans += ', '
        kb1 = InlineKeyboardMarkup()
        aye = InlineKeyboardButton('–ó–∞', callback_data='aye')
        con = InlineKeyboardButton('–ü—Ä–æ—Ç–∏–≤', callback_data='con')
        kb1.add(aye)
        kb1.add(con)
        for i in range(len(arr_players)):
            await bot.send_message(arr_players[i], ans)
            bd.id_to_vote[arr_players[i]] = -100
            msg = await bot.send_message(arr_players[i], text='–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –¥–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ö–æ–¥–∞', reply_markup=kb1)
            bd.vote.append(arr_players[i])
            bd.id_to_delete[arr_players[i]].append(msg)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + str(
            len(bd.lobby_to_info[game_lobby]['mission'])) + ' —á–µ–ª–æ–≤–µ–∫, –∞ –≤ –ø–æ—Ö–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ' + str(
            bd.missions[len(arr_players) - 5][
                bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue']]) + ' —á–µ–ª–æ–≤–µ–∫')


@dp.callback_query_handler(text='aye', state='*')
async def aye(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if message.from_user.id in bd.vote:
        bd.vote.remove(message.from_user.id)
        await bd.lobby_to_sem[game_lobby].acquire()
        await delete_mes(message.from_user.id)
        arr_players = bd.lobby_to_info[game_lobby]['round']
        bd.id_to_vote[message.from_user.id] = 1
        sm = 0
        for i in arr_players:
            if i != message.from_user.id:
                msg = await bot.send_message(i, bd.id_to_name[message.from_user.id] + ' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª')
                bd.id_to_delete1[i].append(msg)
            sm += bd.id_to_vote[i]
        bd.lobby_to_sem[game_lobby].release()
        if sm > -50:
            ay = 0
            co = 0
            for j in arr_players:
                if bd.id_to_vote[j] == 1:
                    ay += 1
                else:
                    co += 1
            for i in arr_players:
                await delete1_mes(i)
                await bot.send_message(i, bd.makar_str)
                await bot.send_message(i, '–ì–æ–ª–æ—Å–∞:')
                if not bd.lobby_to_settings[game_lobby]['CloseVote']:
                    for j in arr_players:
                        if bd.id_to_vote[j] == 1:
                            await bot.send_message(i, str(bd.id_to_name[j]) + ' - –∑–∞')
                        else:
                            await bot.send_message(i, str(bd.id_to_name[j]) + ' - –ø—Ä–æ—Ç–∏–≤')
                else:
                    await bot.send_message(i, '–ó–∞ - ' + str(ay) + ' —á–µ–ª–æ–≤–µ–∫')
                    await bot.send_message(i, '–ü—Ä–æ—Ç–∏–≤ - ' + str(co) + ' —á–µ–ª–æ–≤–µ–∫')
            if sm > 0:
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–ª—Å—è')
                await make_mission(game_lobby)
            else:
                bd.lobby_to_info[game_lobby]['skip'] += 1
                bd.lobby_to_info[game_lobby]['cnt'] += 1
                bd.lobby_to_info[game_lobby]['cnt'] %= len(arr_players)
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω')
                if bd.lobby_to_info[game_lobby]['skip'] == 5:
                    await end_game(game_lobby)
                else:
                    await missions(game_lobby)


@dp.callback_query_handler(text='con', state='*')
async def con(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    if message.from_user.id in bd.vote:
        bd.vote.remove(message.from_user.id)
        await bd.lobby_to_sem[game_lobby].acquire()
        arr_players = bd.lobby_to_info[game_lobby]['round']
        await delete_mes(message.from_user.id)
        bd.id_to_vote[message.from_user.id] = -1
        sm = 0
        for i in arr_players:
            if i != message.from_user.id:
                msg = await bot.send_message(i, bd.id_to_name[message.from_user.id] + ' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª')
                bd.id_to_delete1[i].append(msg)
            sm += bd.id_to_vote[i]
        bd.lobby_to_sem[game_lobby].release()
        if sm > -50:
            ay = 0
            co = 0
            for j in arr_players:
                if bd.id_to_vote[j] == 1:
                    ay += 1
                else:
                    co += 1
            for i in arr_players:
                await delete1_mes(i)
                await bot.send_message(i, bd.makar_str)
                await bot.send_message(i, '–ì–æ–ª–æ—Å–∞:')
                if not bd.lobby_to_settings[game_lobby]['CloseVote']:
                    for j in arr_players:
                        if bd.id_to_vote[j] == 1:
                            await bot.send_message(i, str(bd.id_to_name[j]) + ' - –∑–∞')
                        else:
                            await bot.send_message(i, str(bd.id_to_name[j]) + ' - –ø—Ä–æ—Ç–∏–≤')
                else:
                    await bot.send_message(i, '–ó–∞ - ' + str(ay) + ' —á–µ–ª–æ–≤–µ–∫')
                    await bot.send_message(i, '–ü—Ä–æ—Ç–∏–≤ - ' + str(co) + ' —á–µ–ª–æ–≤–µ–∫')
            if sm > 0:
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–ª—Å—è')
                await make_mission(game_lobby)
            else:
                bd.lobby_to_info[game_lobby]['skip'] += 1
                bd.lobby_to_info[game_lobby]['cnt'] += 1
                bd.lobby_to_info[game_lobby]['cnt'] %= len(arr_players)
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω')
                if bd.lobby_to_info[game_lobby]['skip'] == 5:
                    await end_game(game_lobby)
                else:
                    await missions(game_lobby)


@dp.callback_query_handler(text='success', state='*')
async def success(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    await delete_mes(message.from_user.id)
    await bd.lobby_to_sem[game_lobby].acquire()
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.lobby_to_info[game_lobby]['mission']:
        bd.lobby_to_info[game_lobby]['mission'].remove(message.from_user.id)
        bd.lobby_to_info[game_lobby]['success'] += 1
        for i in arr_players:
            if i != message.from_user.id:
                msg = await bot.send_message(i, bd.id_to_name[message.from_user.id] + ' —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä')
                bd.id_to_delete1[i].append(msg)
        if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
            bd.lobby_to_info[game_lobby]['cnt'] += 1
            bd.lobby_to_info[game_lobby]['cnt'] %= len(arr_players)
            for i in arr_players:
                await delete1_mes(i)
                await bot.send_message(i, bd.makar_str)
                await bot.send_message(i, '–£—Å–ø–µ—Ö–æ–≤ - ' + str(bd.lobby_to_info[game_lobby]['success']))
                await bot.send_message(i, '–ü—Ä–æ–≤–∞–ª–æ–≤ - ' + str(bd.lobby_to_info[game_lobby]['fail']))
            if bd.lobby_to_info[game_lobby]['fail'] > 1:
                bd.lobby_to_info[game_lobby]['colors'] += 'üü•'
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ –ø—Ä–æ–≤–∞–ª–µ–Ω')
                    await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + str(bd.lobby_to_info[game_lobby]['colors']))
                bd.lobby_to_info[game_lobby]['red'] += 1
                if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                        bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                        bd.lobby_to_settings[game_lobby]['Lake_lady']:
                    await lake_lady(game_lobby)
                    return
                if bd.lobby_to_info[game_lobby]['red'] == 3:
                    bd.lobby_to_sem[game_lobby].release()
                    await end_game(game_lobby)
                else:
                    bd.lobby_to_sem[game_lobby].release()
                    await missions(game_lobby)
            elif bd.lobby_to_info[game_lobby]['fail'] == 0:
                bd.lobby_to_info[game_lobby]['colors'] += 'üü¶'
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
                    await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + str(bd.lobby_to_info[game_lobby]['colors']))
                bd.lobby_to_info[game_lobby]['blue'] += 1
                if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                        bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                        bd.lobby_to_settings[game_lobby]['Lake_lady']:
                    await lake_lady(game_lobby)
                    return
                if bd.lobby_to_info[game_lobby]['blue'] == 3:
                    bd.lobby_to_sem[game_lobby].release()
                    await end_game(game_lobby)
                else:
                    bd.lobby_to_sem[game_lobby].release()
                    await missions(game_lobby)
            else:
                if len(arr_players) >= 7 and bd.lobby_to_info[game_lobby]['blue'] + bd.lobby_to_info[game_lobby][
                    'red'] == 3:
                    bd.lobby_to_info[game_lobby]['colors'] += 'üü¶'
                    for i in arr_players:
                        await bot.send_message(i, '–ü–æ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
                        await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + bd.lobby_to_info[game_lobby]['colors'])
                    bd.lobby_to_info[game_lobby]['blue'] += 1
                    if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                            bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                            bd.lobby_to_settings[game_lobby]['Lake_lady']:
                        await lake_lady(game_lobby)
                        return
                    if bd.lobby_to_info[game_lobby]['blue'] == 3:
                        bd.lobby_to_sem[game_lobby].release()
                        await end_game(game_lobby)
                    else:
                        bd.lobby_to_sem[game_lobby].release()
                        await missions(game_lobby)
                else:
                    bd.lobby_to_info[game_lobby]['colors'] += 'üü•'
                    for i in arr_players:
                        await bot.send_message(i, '–ü–æ—Ö–æ–¥ –ø—Ä–æ–≤–∞–ª–µ–Ω')
                        await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + bd.lobby_to_info[game_lobby]['colors'])
                    bd.lobby_to_info[game_lobby]['red'] += 1
                    if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                            bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                            bd.lobby_to_settings[game_lobby]['Lake_lady']:
                        await lake_lady(game_lobby)
                        return
                    if bd.lobby_to_info[game_lobby]['red'] == 3:
                        bd.lobby_to_sem[game_lobby].release()
                        await end_game(game_lobby)
                    else:
                        bd.lobby_to_sem[game_lobby].release()
                        await missions(game_lobby)
        else:
            bd.lobby_to_sem[game_lobby].release()
    else:
        bd.lobby_to_sem[game_lobby].release()


@dp.callback_query_handler(text='fail', state='*')
async def fail(message: types.CallbackQuery):
    if await check_user1(message):
        return
    game_lobby = bd.id_to_lobby[message.from_user.id]
    await delete_mes(message.from_user.id)
    arr_players = bd.lobby_to_info[game_lobby]['round']
    await bd.lobby_to_sem[game_lobby].acquire()
    if message.from_user.id in bd.lobby_to_info[game_lobby]['mission']:
        bd.lobby_to_info[game_lobby]['mission'].remove(message.from_user.id)
        bd.lobby_to_info[game_lobby]['fail'] += 1
        for i in arr_players:
            if i != message.from_user.id:
                msg = await bot.send_message(i, bd.id_to_name[message.from_user.id] + ' —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä')
                bd.id_to_delete1[i].append(msg)
        if len(bd.lobby_to_info[game_lobby]['mission']) == 0:
            bd.lobby_to_info[game_lobby]['cnt'] += 1
            bd.lobby_to_info[game_lobby]['cnt'] %= len(arr_players)
            for i in arr_players:
                await delete1_mes(i)
                await bot.send_message(i, bd.makar_str)
                await bot.send_message(i, '–£—Å–ø–µ—Ö–æ–≤ - ' + str(bd.lobby_to_info[game_lobby]['success']))
                await bot.send_message(i, '–ü—Ä–æ–≤–∞–ª–æ–≤ - ' + str(bd.lobby_to_info[game_lobby]['fail']))
            if bd.lobby_to_info[game_lobby]['fail'] > 1:
                bd.lobby_to_info[game_lobby]['colors'] += 'üü•'
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ –ø—Ä–æ–≤–∞–ª–µ–Ω')
                    await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + str(bd.lobby_to_info[game_lobby]['colors']))
                bd.lobby_to_info[game_lobby]['red'] += 1
                if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                        bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                        bd.lobby_to_settings[game_lobby]['Lake_lady']:
                    await lake_lady(game_lobby)
                    return
                if bd.lobby_to_info[game_lobby]['red'] == 3:
                    bd.lobby_to_sem[game_lobby].release()
                    await end_game(game_lobby)
                else:
                    bd.lobby_to_sem[game_lobby].release()
                    await missions(game_lobby)
            elif bd.lobby_to_info[game_lobby]['fail'] == 0:
                bd.lobby_to_info[game_lobby]['colors'] += 'üü¶'
                for i in arr_players:
                    await bot.send_message(i, '–ü–æ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
                    await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + str(bd.lobby_to_info[game_lobby]['colors']))
                bd.lobby_to_info[game_lobby]['blue'] += 1
                if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                        bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                        bd.lobby_to_settings[game_lobby]['Lake_lady']:
                    await lake_lady(game_lobby)
                    return
                if bd.lobby_to_info[game_lobby]['blue'] == 3:
                    bd.lobby_to_sem[game_lobby].release()
                    await end_game(game_lobby)
                else:
                    bd.lobby_to_sem[game_lobby].release()
                    await missions(game_lobby)
            else:
                if len(arr_players) >= 7 and bd.lobby_to_info[game_lobby]['blue'] + bd.lobby_to_info[game_lobby][
                    'red'] == 3:
                    bd.lobby_to_info[game_lobby]['colors'] += 'üü¶'
                    for i in arr_players:
                        await bot.send_message(i, '–ü–æ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
                        await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + bd.lobby_to_info[game_lobby]['colors'])
                    bd.lobby_to_info[game_lobby]['blue'] += 1
                    if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                            bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                            bd.lobby_to_settings[game_lobby]['Lake_lady']:
                        await lake_lady(game_lobby)
                        return
                    if bd.lobby_to_info[game_lobby]['blue'] == 3:
                        bd.lobby_to_sem[game_lobby].release()
                        await end_game(game_lobby)
                    else:
                        bd.lobby_to_sem[game_lobby].release()
                        await missions(game_lobby)
                else:
                    bd.lobby_to_info[game_lobby]['colors'] += 'üü•'
                    for i in arr_players:
                        await bot.send_message(i, '–ü–æ—Ö–æ–¥ –ø—Ä–æ–≤–∞–ª–µ–Ω')
                        await bot.send_message(i, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–æ–≤: ' + bd.lobby_to_info[game_lobby]['colors'])
                    bd.lobby_to_info[game_lobby]['red'] += 1
                    if bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] > 1 and \
                            bd.lobby_to_info[game_lobby]['red'] + bd.lobby_to_info[game_lobby]['blue'] < 5 and \
                            bd.lobby_to_settings[game_lobby]['Lake_lady']:
                        await lake_lady(game_lobby)
                        return
                    if bd.lobby_to_info[game_lobby]['red'] == 3:
                        bd.lobby_to_sem[game_lobby].release()
                        await end_game(game_lobby)
                    else:
                        bd.lobby_to_sem[game_lobby].release()
                        await missions(game_lobby)
        else:
            bd.lobby_to_sem[game_lobby].release()
    else:
        bd.lobby_to_sem[game_lobby].release()


@dp.callback_query_handler(text='button10', state='*')
async def button10(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[0]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[0]])
        if bd.id_to_role[arr_players[0]][1] == '–ú' and bd.id_to_role[arr_players[0]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button11', state='*')
async def button11(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[1]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[1]])
        if bd.id_to_role[arr_players[1]][1] == '–ú' and bd.id_to_role[arr_players[1]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button12', state='*')
async def button12(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[2]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[2]])
        if bd.id_to_role[arr_players[2]][1] == '–ú' and bd.id_to_role[arr_players[2]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button13', state='*')
async def button13(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[3]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[3]])
        if bd.id_to_role[arr_players[3]][1] == '–ú' and bd.id_to_role[arr_players[3]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button14', state='*')
async def button14(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[4]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[4]])
        if bd.id_to_role[arr_players[4]][1] == '–ú' and bd.id_to_role[arr_players[4]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button15', state='*')
async def button15(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[5]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[5]])
        if bd.id_to_role[arr_players[5]][1] == '–ú' and bd.id_to_role[arr_players[5]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button16', state='*')
async def button16(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[6]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[6]])
        if bd.id_to_role[arr_players[6]][1] == '–ú' and bd.id_to_role[arr_players[6]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button17', state='*')
async def button17(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[7]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[7]])
        if bd.id_to_role[arr_players[7]][1] == '–ú' and bd.id_to_role[arr_players[7]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button18', state='*')
async def button18(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[8]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[8]])
        if bd.id_to_role[arr_players[8]][1] == '–ú' and bd.id_to_role[arr_players[8]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


@dp.callback_query_handler(text='button19', state='*')
async def button19(message: types.CallbackQuery):
    if await check_user1(message):
        return
    await delete_mes(message.from_user.id)
    await delete1_mes(message.from_user.id)
    game_lobby = bd.id_to_lobby[message.from_user.id]
    arr_players = bd.lobby_to_info[game_lobby]['round']
    if message.from_user.id in bd.id_in_game:
        for i in arr_players:
            await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ ' + bd.id_to_name[arr_players[9]] + ' –∏ –ø–æ–ø–∞–ª–∏ –≤ ' +
                                   bd.id_to_role[arr_players[9]])
        if bd.id_to_role[arr_players[9]][1] == '–ú' and bd.id_to_role[arr_players[9]][0] == 'üü¶':
            for i in arr_players:
                await bot.send_message(i, '–ö—Ä–∞—Å–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])
        else:
            for i in arr_players:
                await bot.send_message(i, '–°–∏–Ω–∏–µ –ø–æ–±–µ–¥–∏–ª–∏')
                state = dp.current_state(user=i)
                await state.set_state(TestStates.all()[0])
                bd.id_in_game.remove(i)
            for i in arr_players:
                await bot.send_message(i, '–†–æ–ª–∏:')
                for j in arr_players:
                    await bot.send_message(i, bd.id_to_name[j] + ' - ' + bd.id_to_role[j])


executor.start_polling(
    dp,
    skip_updates=True,
)
